* spec
** command
- rename filename from lower to upper case
for f in * ; do mv -- "$f" "$(tr [:lower:] [:upper:] <<< "${f:0:4}")"".pdb" ; done

** timing
Select 10 DIBS and 10 IDR proteins (linker length 6,12,24,48,96)
Run on sequence extracted from pdb first (use this as reference)
Idr (10)
1ozs,1tce,1i8h,1h8b,1h3h,1sb0,2laj,2m3m,2czy,2rsn,4x34
Exclude: 2xze,3ql9,4z0r,4x34(too long to run)
6 done (gpu: 5 per 3 hrs)
12 done
24 done (cpu: 6hrs per 5, gpu: 3hrs per 5)
48 done (cpu: 6hrs per 5, gpu: 4hrs per 5)
96 done (gpu: 3-6hrs per 5)
Dibs (5)
3ixs,3fdt,3g2v,5urn,4gng,5heb,3mxc,3wgx,3g2u (9)
6 done (gpu: 3hrs per 5)
12 done
24 done (cpu: 8hrs per 5)
48 done (cpu: 8hrs per 5)
96 done (cpu -14hrs per 5)

** imports
import sys, re, gc, os, io, importlib, numpy as np, matplotlib.pyplot as plt
from Bio import SeqIO;from Bio.Seq import Seq;from Bio.SeqRecord import SeqRecord;from os.path import join;from biopandas.pdb import PandasPdb

os.chdir('/media/fred/Local Disk/projects/bioinfo/code')

pdb_fn_0='/media/fred/Local Disk/projects/bioinfo/data/input/idr/pdbs/1YCQ.pdb'
pdb_fn_1='/media/fred/Local Disk/projects/bioinfo/data/input/idr/pdbs/2AZE.pdb'

pdb_fn='../data/input/ds1/pdbs/1CF4.pdb'
pred_fn='../data/output/ds1_af_full/poly_g_20_fasta/1CF4.fasta/ranked_0_removed_linker.pdb'
exec_path='./pipeline'

pdb_fn='/media/fred/Local Disk/projects/bioinfo/data/input/ds1/pdbs/2AFF.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/ds1_af_full/poly_g_20_fasta/2AFF.fasta/ranked_0_removed_linker.pdb'

link_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6/1YCQ.fasta/ranked_0.pdb'
link_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6/2AZE.fasta/ranked_0.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6/2AZE.fasta/ranked_0_removed_linker.pdb'

pred_fn_6f_0='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker.pdb'

pred_fn_20_0='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_20/1YCQ.fasta/ranked_0_removed_linker.pdb'
pred_fn_20_1='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_20/2AZE.fasta/ranked_0_removed_linker.pdb'

complex_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6/1YCQ.fasta/complex.pdb'

sed -i -e 's/aria2c/wget/g' -e 's/--dir=/-P /g' -e 's/--preserve-permissions//g' scripts/*.sh

scp -r ../../data/input/dibs/pdb_cho0.npy  fred862@beluga.computecanada.ca:~/scratch/fred862/data/bioinfo/input/seq_to_pred/dibs

bsl-py==0.13.0
biopython==1.79
chex==0.0.7
dm-haiku==0.0.4
dm-tree==0.1.6
immutabledict==2.0.0
jax==0.2.14
ml-collections==0.1.0
numpy==1.19.5
pandas==1.3.0
pdbfixer==1.8.1
protobuf==3.19.4
scipy==1.7.0
tensorflow-cpu==2.4.1

** pymol
In order to use pymol in python script, it is recommended to use the python interpreter shipped together with the pymol package [here](https://stackoverflow.com/questions/63958085/how-to-embed-the-pymol-module-into-python)

Locate python interpreter (e.g. {install_dir}/pymol/bin/python3.7) and then create a symbolink file (named as e.g. *pymolthon*) for this python interpreter via `ln -s {install_dir}/pymol/bin/python3.7 {insall_dir}/pymol/bin/pymolthon`. Then add path `{install_dir}/pymol/bin` to $PATH variable in ~/.bashrc.

Now we can call `pymolthon` directly from command line. Comes with this python interpreter are basic packages including pymol, Biopython, and numpy etc. To install new packages, use `pymolthon -m pip install {package-name}` or `pymolthon -m pip install -r requirements.txt`

** conda
conda create --prefix (or -p) {path_to_virtualenv}/{env_name}
conda env list
conda env remove --prefix ...

conda create -n {env_name}
conda env remove -n ...

conda clean -a

python3 -m venv /path/to/new/virtual/environmen
OR
sudo apt-get install python-pip
pip install virtualenv
virtualenv -p='/usr/bin/python3.8' /opt/virtualenv/test_env

* Record
** Metrics
** predicted lddt
alphafold's per-residue prediction of its lDDT-C_alpha score

measures percent of correclty predicted interatomic distances not 
how well the predicted the true structures can be superimposed

it rewards locally correct structures and getting invidudual domains
right

pldddt behaves similarly as a measure of local confidence

0 (least confiden) - 100 (most confident)
used to identiy domains and possible disordered regions and 
assessing confidence within a domain

** Aug 1
*** Sat
indir = '../data/input/idr_84/source'
outdir = '../data/input/idr_84/poly_g_6'
groups = parse_to_groups(indir)
poly_g_link(indir, outdir, groups, n_g)

** Aug 15
*** Fri
model_name='native'
chain_name='L'

gt_fn='/media/fred/Local Disk/projects/bioinfo/data/input/peptide/pdbs/1AWR.pdb'
gt_fn='/media/fred/Local Disk/projects/bioinfo/data/input/idr_84/pdbs/1YCQ.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/peptide_af_full/poly_g_6/1AWR.fasta/ranked_0_removed_linker.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_84_pf_full/poly_g_6/1YCQ.fasta/ranked_0.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_84_pf_full/poly_g_6/1YCQ.fasta/ranked_0_removed_linker.pdb'
pred_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_84_pf_full/poly_g_6/1YCQ.fasta/ranked_0_removed_linker_aligned.pdb'
cmd.load(pred_fn,'pred')
cmd.load(gt_fn,'native')
cmd.create('tmp',f'all and model {model_name} and chain {chain_name}')
cmd.select('tmp',f'all and model {model_name} and chain {chain_name}') # coord only

chain_start_ids=[0,113,-1]

** Aug 22
*** Wed
def solve(fn):
    ppdb = PandasPdb()
    _ = ppdb.read_pdb(fn)
    df = ppdb.df['ATOM']
    return df

def get_residue_id(pdb_fn):
    ppdb = PandasPdb()
    _ = ppdb.read_pdb(pdb_fn)
    df = ppdb.df['ATOM']
    n = df.shape[0]

    prev_id = df.loc[0,'residue_number']
    resid_ids = [prev_id]

    for atom_id in range(1, n):
       cur_id = df.loc[atom_id, 'residue_number']
       if cur_id != prev_id:
           resid_ids.append(cur_id)
           prev_id = cur_id

    return resid_ids
*** Fri
- process output csv

import csv
import pandas as pd

target_cols = ['model_name','pdb_id','rec_chain','pep_chain','rank','model_no','rms_before_ref_align_seq_rec_bb 52','rms_before_ref_align_seq_rec','rms_before_ref_align_seq_pep_bb','rms_before_ref_align_seq_pep','rmsBB_if_af2','rmsBB_allIF','rmsALL_if_af2','rmsALL_allIF','rmsBB','rmsBB_if_pfpd','rmsALL_if_pfpd']

def clean_and_reorder_csv(in_fn, out_fn, target_cols):
    #in_fn = '../data/input/peptide/metric.csv'
    #out_fn = '../data/input/peptide/metric_reord.csv'
    #target_fn = '../code/peptide/Data/Source_Data/capri_supfig2.csv'

    df = pd.read_csv(in_fn)
    col_all = list(df.columns)
    df_t = pd.read_csv(target_fn)
    col_target = list(df_t.columns)
    col_to_drop = list(set(col_all) - set(col_target))

    for colname in col_to_drop:
        df.drop(colname, inplace=True, axis=1)

    df.to_csv(out_fn, sep=',')

with open(in_fn,'rb') as source:
    rdr= csv.reader( source )
    with open(out_fn,'wb') as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )

with open('file.csv', 'r') as infile, open('reordered.csv', 'a') as outfile:
    # output dict needs a list for new column ordering
    fieldnames = ['A', 'C', 'D', 'E', 'B']
    writer = csv.DictWriter(outfile, fieldnames=fieldnames)
    # reorder the header first
    writer.writeheader()
    for row in csv.DictReader(infile):
        # writes the reordered rows to the new file
        writer.writerow(row)
** Aug 29
*** Tue
cmd.show_as(representation='cartoon',selection='native or pred')
cmd.multisave('/home/fred/Downloads/tmp.pdb','native or pred',format='pdb')
** Sep 11
*** Sun
pdb_fn='/media/fred/Local Disk/projects/bioinfo/data/input/idr/pdbs/1YCQ.pdb'
in_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker.pdb'
out_fn='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker_aligned.pdb'
seqs1=read_residue_from_pdb('../data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker.pdb')
seqs2=read_residue_from_pdb('../data/input/idr/pdbs/1YCQ.pdb')
ranges=find_prune_ranges_all_chains(seqs1, seqs2, chain_ids, prune_X=False)
#ranges = np.array([[[0,8],[96,107]],[[107, 111],[122, 124]]])

prune_seq_given_ranges('../data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker.pdb','../data/output/idr_af_full/poly_g_6_fasta/1YCQ.fasta/ranked_0_removed_linker_aligned.pdb',ids['1YCQ'],ranges)

seqs1=read_residue_from_pdb('../data/output/idr_af_full/poly_g_6_fasta/2AZE.fasta/ranked_0_removed_linker.pdb')
seqs2=read_residue_from_pdb('../data/input/idr/pdbs/2AZE.pdb')
ranges=find_prune_ranges_all_chains(seqs1, seqs2, prune_X=False)
    
*** Tue
def solve(fn):
    ppdb = PandasPdb()
    _ = ppdb.read_pdb(fn)
    df = ppdb.df['ATOM']
    return set(df['residue_number'])
** Sep 18
*** Fri
pdb0='/media/fred/Local Disk/projects/bioinfo/data/input/idr/pdbs/1H8B.pdb'
pred06='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_6/1H8B.fasta/ranked_0_removed_linker.pdb'
pred012='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_12/1H8B.fasta/ranked_0_removed_linker.pdb'
pred024='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_24/1H8B.fasta/ranked_0_removed_linker.pdb'
pred048='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_48/1H8B.fasta/ranked_0_removed_linker.pdb'
pred096='/media/fred/Local Disk/projects/bioinfo/data/output/idr_af_full/poly_g_96/1H8B.fasta/ranked_0_removed_linker.pdb'

pdb1='/media/fred/Local Disk/projects/bioinfo/data/input/dibs/pdbs/5URN.pdb'
pred16='/media/fred/Local Disk/projects/bioinfo/data/output/dibs_af_full/poly_g_6/5URN.fasta/ranked_0_removed_linker.pdb'
pred112='/media/fred/Local Disk/projects/bioinfo/data/output/dibs_af_full/poly_g_12/5URN.fasta/ranked_0_removed_linker.pdb'
pred124='/media/fred/Local Disk/projects/bioinfo/data/output/dibs_af_full/poly_g_24/5URN.fasta/ranked_0_removed_linker.pdb'
pred148='/media/fred/Local Disk/projects/bioinfo/data/output/dibs_af_full/poly_g_48/5URN.fasta/ranked_0_removed_linker.pdb'
pred196='/media/fred/Local Disk/projects/bioinfo/data/output/dibs_af_full/poly_g_96/5URN.fasta/ranked_0_removed_linker.pdb'

** Sep 25
*** Wed
diff=find_residue_diff_in_atom_counts(in_dir, out_dir, '2XZE', pred_fn)
ranges=[[877, 884], [921,931],[1530,1537],[1621,1628],[1638,1643],[2117,2127],[2249,2257],[2545, 2546]]

pdb_fn='../data/input/idr/pdb_to_prune/2XZE.pdb'
out_fn = '../data/input/idr/pdbs/2XZE.pdb'
pred_fn = '../data/output/idr_af_full/poly_g_12/3QL9.fasta/ranked_0_removed_linker.pdb'
diff=find_residue_diff_in_atom_counts(pdb_fn, pred_fn)
# manual generation of range
ranges=[[[876, 884], [921, 931]], [[1530, 1537], [1621, 1628], [1638, 1643], [2117, 2127], [2249, 2257]], [[2545, 2545]]]
prune_extra_atoms(pdb_fn, out_fn, ranges)
** Oct 2
*** Sun
cpu:
a='1XR0,1WLP,1QFN,1S5R,1SSE,1UEL,1C8O,1JGN,1D5S,1CF4,1JMT,1J2J,1OZS,1Q5W,1L4W,1ORY,1PD7,1PNB,7VSI,7TGG,7VLJ,7S5J,7PKU,7QV8,2FHO,2JU0,2GGV,2GP9,2JMX,2DT7,2KJE,2LEH,2OFQ,2KDU,2K42,2KC8,2KHW,2KJ4,2ZQP,3BZV,2RNR,2PQ4,2ROZ,3CAA,3H8K,3HK3,4LX3,4MMT,3MN7,3HM6,3M1F,3M51,6SBA,7B2B,6WUD,6XFL,6LPH,7CQP,7FB5,7DCP,7JQD,7OYS,7LWB'
b=a.split(',')

2FOT,2PHG,5GTU,5L0T,7E2H,7NDX,7NJ1,7P9U,7OVC,7LJ0
error: 7OS1

gpu:
a='1PNB,1SSE,1S5R,1Q5W,1QFN,1J2J,1D5S,1C8O,1JGN,1CF4,1OZS,1PD7,1L4W,1ORY,1JMT,1UEL,1WLP,1S5R,1QFN,1XR0'

*** Mon
a='1XTG,7JYZ,7P9U,7NDX,2PHG,7E2H,7OYS,7P9U,2PHG,2BBN,7OVC,7EV8,7OYS,1XTG,7LJ0'
b=a.split(',')
exclude '2AUH','7NJ1'
*** Wed
a='1XTG,1YHN,2AFF,2BBN,2DOH,2DT7,2FHO,2FOT,2GGV,2GP9,2JMX,2JSS,2JU0,2K42,2KC8,2KDU,2KHW,2KJ4,2KJE,2LEH,2OFQ,2PHG,2PQ4,2RNR,2ROZ,2ZQP,3BZV,3CAA,3H8K,3HK3,3M51,3MN7,4LX3,4MMT,5GTU,5L0T,6LPH,6WUD,6XFL,7OVC,7OY3'

exclude: 7P9U 7E2H (outofmeme), 3HM6 7A48 (amber err)
** Oct 16
*** Sun
- ds1 record
GPU err: 3HM6 (amber miniz err, one residue with no atoms)
         7A48 (amber...)
         7JQD (amber...)
         7S5J (minimization failed after 100 attempts)
GPU out of mem: 7P9U, 7E2H, 7DCP


'1C8O,1CF4,1D5S,1J2J,1JGN,1JMT,1L4W,1ORY,1OZS,1PD7,1PNB,1Q5W,1QFN,1S5R,1SSE,1UEL,1WLP,1XR0,1XTG,1YHN,2AFF,2BBN,2DOH,2DT7,2FHO,2FOT,2GGV,2GP9,2JMX,2JSS,2JU0,2K42,2KC8,2KDU,2KHW,2KJ4,2KJE,2LEH,2OFQ,2PHG,2PQ4,2RNR,2ROZ,2ZQP,3BZV,3CAA,3H8K,3HK3,3M1F,3M51,3MN7,4LX3,4MMT,5GTU,5L0T,6LPH,6SBA,6WUD,6XFL,7B2B,7BY2,7CQP,7FB5,7OVC,7OY3'
